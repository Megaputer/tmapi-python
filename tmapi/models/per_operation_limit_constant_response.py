# coding: utf-8

"""
    Megaputer Text Mining API

    Megaputer Text Mining API  # noqa: E501

    OpenAPI spec version: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PerOperationLimitConstantResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ntu_limit': 'int',
        'ntu_tokens': 'int',
        'ntu_keywords': 'int',
        'ntu_entities': 'int',
        'ntu_languages': 'int',
        'ntu_sentiments': 'int',
        'ntu_facts': 'int'
    }

    attribute_map = {
        'ntu_limit': 'NTULimit',
        'ntu_tokens': 'NTUTokens',
        'ntu_keywords': 'NTUKeywords',
        'ntu_entities': 'NTUEntities',
        'ntu_languages': 'NTULanguages',
        'ntu_sentiments': 'NTUSentiments',
        'ntu_facts': 'NTUFacts'
    }

    def __init__(self, ntu_limit=None, ntu_tokens=None, ntu_keywords=None, ntu_entities=None, ntu_languages=None, ntu_sentiments=None, ntu_facts=None):  # noqa: E501
        """PerOperationLimitConstantResponse - a model defined in OpenAPI"""  # noqa: E501

        self._ntu_limit = None
        self._ntu_tokens = None
        self._ntu_keywords = None
        self._ntu_entities = None
        self._ntu_languages = None
        self._ntu_sentiments = None
        self._ntu_facts = None
        self.discriminator = None

        if ntu_limit is not None:
            self.ntu_limit = ntu_limit
        if ntu_tokens is not None:
            self.ntu_tokens = ntu_tokens
        if ntu_keywords is not None:
            self.ntu_keywords = ntu_keywords
        if ntu_entities is not None:
            self.ntu_entities = ntu_entities
        if ntu_languages is not None:
            self.ntu_languages = ntu_languages
        if ntu_sentiments is not None:
            self.ntu_sentiments = ntu_sentiments
        if ntu_facts is not None:
            self.ntu_facts = ntu_facts

    @property
    def ntu_limit(self):
        """Gets the ntu_limit of this PerOperationLimitConstantResponse.  # noqa: E501

        The maximum number of text units that can be processed in all time  # noqa: E501

        :return: The ntu_limit of this PerOperationLimitConstantResponse.  # noqa: E501
        :rtype: int
        """
        return self._ntu_limit

    @ntu_limit.setter
    def ntu_limit(self, ntu_limit):
        """Sets the ntu_limit of this PerOperationLimitConstantResponse.

        The maximum number of text units that can be processed in all time  # noqa: E501

        :param ntu_limit: The ntu_limit of this PerOperationLimitConstantResponse.  # noqa: E501
        :type: int
        """

        self._ntu_limit = ntu_limit

    @property
    def ntu_tokens(self):
        """Gets the ntu_tokens of this PerOperationLimitConstantResponse.  # noqa: E501

        Counter of text units that have been already processed for operation Text parsing  # noqa: E501

        :return: The ntu_tokens of this PerOperationLimitConstantResponse.  # noqa: E501
        :rtype: int
        """
        return self._ntu_tokens

    @ntu_tokens.setter
    def ntu_tokens(self, ntu_tokens):
        """Sets the ntu_tokens of this PerOperationLimitConstantResponse.

        Counter of text units that have been already processed for operation Text parsing  # noqa: E501

        :param ntu_tokens: The ntu_tokens of this PerOperationLimitConstantResponse.  # noqa: E501
        :type: int
        """

        self._ntu_tokens = ntu_tokens

    @property
    def ntu_keywords(self):
        """Gets the ntu_keywords of this PerOperationLimitConstantResponse.  # noqa: E501

        Counter of text units that have been already processed for operation Keywords extraction  # noqa: E501

        :return: The ntu_keywords of this PerOperationLimitConstantResponse.  # noqa: E501
        :rtype: int
        """
        return self._ntu_keywords

    @ntu_keywords.setter
    def ntu_keywords(self, ntu_keywords):
        """Sets the ntu_keywords of this PerOperationLimitConstantResponse.

        Counter of text units that have been already processed for operation Keywords extraction  # noqa: E501

        :param ntu_keywords: The ntu_keywords of this PerOperationLimitConstantResponse.  # noqa: E501
        :type: int
        """

        self._ntu_keywords = ntu_keywords

    @property
    def ntu_entities(self):
        """Gets the ntu_entities of this PerOperationLimitConstantResponse.  # noqa: E501

        Counter of text units that have been already processed for operation Entities extraction  # noqa: E501

        :return: The ntu_entities of this PerOperationLimitConstantResponse.  # noqa: E501
        :rtype: int
        """
        return self._ntu_entities

    @ntu_entities.setter
    def ntu_entities(self, ntu_entities):
        """Sets the ntu_entities of this PerOperationLimitConstantResponse.

        Counter of text units that have been already processed for operation Entities extraction  # noqa: E501

        :param ntu_entities: The ntu_entities of this PerOperationLimitConstantResponse.  # noqa: E501
        :type: int
        """

        self._ntu_entities = ntu_entities

    @property
    def ntu_languages(self):
        """Gets the ntu_languages of this PerOperationLimitConstantResponse.  # noqa: E501

        Counter of text units that have been already processed for operation Language detection  # noqa: E501

        :return: The ntu_languages of this PerOperationLimitConstantResponse.  # noqa: E501
        :rtype: int
        """
        return self._ntu_languages

    @ntu_languages.setter
    def ntu_languages(self, ntu_languages):
        """Sets the ntu_languages of this PerOperationLimitConstantResponse.

        Counter of text units that have been already processed for operation Language detection  # noqa: E501

        :param ntu_languages: The ntu_languages of this PerOperationLimitConstantResponse.  # noqa: E501
        :type: int
        """

        self._ntu_languages = ntu_languages

    @property
    def ntu_sentiments(self):
        """Gets the ntu_sentiments of this PerOperationLimitConstantResponse.  # noqa: E501

        Counter of text units that have been already processed for operation Sentiments analysis  # noqa: E501

        :return: The ntu_sentiments of this PerOperationLimitConstantResponse.  # noqa: E501
        :rtype: int
        """
        return self._ntu_sentiments

    @ntu_sentiments.setter
    def ntu_sentiments(self, ntu_sentiments):
        """Sets the ntu_sentiments of this PerOperationLimitConstantResponse.

        Counter of text units that have been already processed for operation Sentiments analysis  # noqa: E501

        :param ntu_sentiments: The ntu_sentiments of this PerOperationLimitConstantResponse.  # noqa: E501
        :type: int
        """

        self._ntu_sentiments = ntu_sentiments

    @property
    def ntu_facts(self):
        """Gets the ntu_facts of this PerOperationLimitConstantResponse.  # noqa: E501

        Counter of text units that have been already processed for operation Facts extraction  # noqa: E501

        :return: The ntu_facts of this PerOperationLimitConstantResponse.  # noqa: E501
        :rtype: int
        """
        return self._ntu_facts

    @ntu_facts.setter
    def ntu_facts(self, ntu_facts):
        """Sets the ntu_facts of this PerOperationLimitConstantResponse.

        Counter of text units that have been already processed for operation Facts extraction  # noqa: E501

        :param ntu_facts: The ntu_facts of this PerOperationLimitConstantResponse.  # noqa: E501
        :type: int
        """

        self._ntu_facts = ntu_facts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PerOperationLimitConstantResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
