# coding: utf-8

"""
    Megaputer Text Mining API

    Megaputer Text Mining API  # noqa: E501

    OpenAPI spec version: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SentimentsResponseAttributes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'subject': 'str',
        'evaluation': 'str',
        'object': 'str',
        'head_object': 'str',
        'degree': 'int',
        'aspect': 'str',
        'confidence': 'float'
    }

    attribute_map = {
        'subject': 'Subject',
        'evaluation': 'Evaluation',
        'object': 'Object',
        'head_object': 'HeadObject',
        'degree': 'Degree',
        'aspect': 'Aspect',
        'confidence': 'Confidence'
    }

    def __init__(self, subject=None, evaluation=None, object=None, head_object=None, degree=None, aspect=None, confidence=None):  # noqa: E501
        """SentimentsResponseAttributes - a model defined in OpenAPI"""  # noqa: E501

        self._subject = None
        self._evaluation = None
        self._object = None
        self._head_object = None
        self._degree = None
        self._aspect = None
        self._confidence = None
        self.discriminator = None

        if subject is not None:
            self.subject = subject
        if evaluation is not None:
            self.evaluation = evaluation
        if object is not None:
            self.object = object
        if head_object is not None:
            self.head_object = head_object
        if degree is not None:
            self.degree = degree
        if aspect is not None:
            self.aspect = aspect
        if confidence is not None:
            self.confidence = confidence

    @property
    def subject(self):
        """Gets the subject of this SentimentsResponseAttributes.  # noqa: E501

        Either the speaker himself or another person (a group of people) whose opinion is shared. The subject of evaluation is not always mentioned in a text, especially when we deal with informal texts, such as forums, blogs and social network posts.   # noqa: E501

        :return: The subject of this SentimentsResponseAttributes.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SentimentsResponseAttributes.

        Either the speaker himself or another person (a group of people) whose opinion is shared. The subject of evaluation is not always mentioned in a text, especially when we deal with informal texts, such as forums, blogs and social network posts.   # noqa: E501

        :param subject: The subject of this SentimentsResponseAttributes.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def evaluation(self):
        """Gets the evaluation of this SentimentsResponseAttributes.  # noqa: E501

        Implies the emotional judgment of a subject to some topic, an emotional reaction to something or the overall emotional tone of an utterance. Evaluation expresses an attitude of a subjeсt to a particular object, emotional response to something.   # noqa: E501

        :return: The evaluation of this SentimentsResponseAttributes.  # noqa: E501
        :rtype: str
        """
        return self._evaluation

    @evaluation.setter
    def evaluation(self, evaluation):
        """Sets the evaluation of this SentimentsResponseAttributes.

        Implies the emotional judgment of a subject to some topic, an emotional reaction to something or the overall emotional tone of an utterance. Evaluation expresses an attitude of a subjeсt to a particular object, emotional response to something.   # noqa: E501

        :param evaluation: The evaluation of this SentimentsResponseAttributes.  # noqa: E501
        :type: str
        """

        self._evaluation = evaluation

    @property
    def object(self):
        """Gets the object of this SentimentsResponseAttributes.  # noqa: E501

        It is something which is evaluated. Similar to the subject of evaluation, objects may not always be mentioned.  # noqa: E501

        :return: The object of this SentimentsResponseAttributes.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this SentimentsResponseAttributes.

        It is something which is evaluated. Similar to the subject of evaluation, objects may not always be mentioned.  # noqa: E501

        :param object: The object of this SentimentsResponseAttributes.  # noqa: E501
        :type: str
        """

        self._object = object

    @property
    def head_object(self):
        """Gets the head_object of this SentimentsResponseAttributes.  # noqa: E501

        The main words in a phrase.  # noqa: E501

        :return: The head_object of this SentimentsResponseAttributes.  # noqa: E501
        :rtype: str
        """
        return self._head_object

    @head_object.setter
    def head_object(self, head_object):
        """Sets the head_object of this SentimentsResponseAttributes.

        The main words in a phrase.  # noqa: E501

        :param head_object: The head_object of this SentimentsResponseAttributes.  # noqa: E501
        :type: str
        """

        self._head_object = head_object

    @property
    def degree(self):
        """Gets the degree of this SentimentsResponseAttributes.  # noqa: E501

        It is used to refer to the degree of positive evaluation ranging from 1 to 5 (1-rather positivem 5 - extremely positive) and negative evaluation ranging from -1 to -5 (-1 rather negative, - 5 - extremely negative).   # noqa: E501

        :return: The degree of this SentimentsResponseAttributes.  # noqa: E501
        :rtype: int
        """
        return self._degree

    @degree.setter
    def degree(self, degree):
        """Sets the degree of this SentimentsResponseAttributes.

        It is used to refer to the degree of positive evaluation ranging from 1 to 5 (1-rather positivem 5 - extremely positive) and negative evaluation ranging from -1 to -5 (-1 rather negative, - 5 - extremely negative).   # noqa: E501

        :param degree: The degree of this SentimentsResponseAttributes.  # noqa: E501
        :type: int
        """
        if degree is not None and degree > 5:  # noqa: E501
            raise ValueError("Invalid value for `degree`, must be a value less than or equal to `5`")  # noqa: E501
        if degree is not None and degree < -5:  # noqa: E501
            raise ValueError("Invalid value for `degree`, must be a value greater than or equal to `-5`")  # noqa: E501

        self._degree = degree

    @property
    def aspect(self):
        """Gets the aspect of this SentimentsResponseAttributes.  # noqa: E501

        It is a word or phrase that defines what characteristic of the object is evaluated. It allows users to summarize different ways of expressing the same entity in one thematic section.   # noqa: E501

        :return: The aspect of this SentimentsResponseAttributes.  # noqa: E501
        :rtype: str
        """
        return self._aspect

    @aspect.setter
    def aspect(self, aspect):
        """Sets the aspect of this SentimentsResponseAttributes.

        It is a word or phrase that defines what characteristic of the object is evaluated. It allows users to summarize different ways of expressing the same entity in one thematic section.   # noqa: E501

        :param aspect: The aspect of this SentimentsResponseAttributes.  # noqa: E501
        :type: str
        """

        self._aspect = aspect

    @property
    def confidence(self):
        """Gets the confidence of this SentimentsResponseAttributes.  # noqa: E501

        It represents measure of how sure TM API Server in its conclusion. Confidence is measured on scale of 0.0 to 1.0.  # noqa: E501

        :return: The confidence of this SentimentsResponseAttributes.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this SentimentsResponseAttributes.

        It represents measure of how sure TM API Server in its conclusion. Confidence is measured on scale of 0.0 to 1.0.  # noqa: E501

        :param confidence: The confidence of this SentimentsResponseAttributes.  # noqa: E501
        :type: float
        """
        if confidence is not None and confidence > 1:  # noqa: E501
            raise ValueError("Invalid value for `confidence`, must be a value less than or equal to `1`")  # noqa: E501
        if confidence is not None and confidence < 0:  # noqa: E501
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")  # noqa: E501

        self._confidence = confidence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SentimentsResponseAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
