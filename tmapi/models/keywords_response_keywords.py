# coding: utf-8

"""
    Megaputer Text Mining API

    Megaputer Text Mining API  # noqa: E501

    OpenAPI spec version: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class KeywordsResponseKeywords(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'keyword': 'str',
        'negated': 'bool',
        'part_of_speech': 'str',
        'significance': 'float',
        'support': 'int',
        'frequency': 'int',
        'positions': 'list[KeywordsResponsePositions]'
    }

    attribute_map = {
        'keyword': 'keyword',
        'negated': 'negated',
        'part_of_speech': 'partOfSpeech',
        'significance': 'significance',
        'support': 'support',
        'frequency': 'frequency',
        'positions': 'positions'
    }

    def __init__(self, keyword=None, negated=None, part_of_speech=None, significance=None, support=None, frequency=None, positions=None):  # noqa: E501
        """KeywordsResponseKeywords - a model defined in OpenAPI"""  # noqa: E501

        self._keyword = None
        self._negated = None
        self._part_of_speech = None
        self._significance = None
        self._support = None
        self._frequency = None
        self._positions = None
        self.discriminator = None

        if keyword is not None:
            self.keyword = keyword
        if negated is not None:
            self.negated = negated
        if part_of_speech is not None:
            self.part_of_speech = part_of_speech
        if significance is not None:
            self.significance = significance
        if support is not None:
            self.support = support
        if frequency is not None:
            self.frequency = frequency
        if positions is not None:
            self.positions = positions

    @property
    def keyword(self):
        """Gets the keyword of this KeywordsResponseKeywords.  # noqa: E501

        Normalized keyword  # noqa: E501

        :return: The keyword of this KeywordsResponseKeywords.  # noqa: E501
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this KeywordsResponseKeywords.

        Normalized keyword  # noqa: E501

        :param keyword: The keyword of this KeywordsResponseKeywords.  # noqa: E501
        :type: str
        """

        self._keyword = keyword

    @property
    def negated(self):
        """Gets the negated of this KeywordsResponseKeywords.  # noqa: E501

        Indicates negation in the semantics of the word and returns the boolean values  # noqa: E501

        :return: The negated of this KeywordsResponseKeywords.  # noqa: E501
        :rtype: bool
        """
        return self._negated

    @negated.setter
    def negated(self, negated):
        """Sets the negated of this KeywordsResponseKeywords.

        Indicates negation in the semantics of the word and returns the boolean values  # noqa: E501

        :param negated: The negated of this KeywordsResponseKeywords.  # noqa: E501
        :type: bool
        """

        self._negated = negated

    @property
    def part_of_speech(self):
        """Gets the part_of_speech of this KeywordsResponseKeywords.  # noqa: E501

        Part of speech of the keyword  # noqa: E501

        :return: The part_of_speech of this KeywordsResponseKeywords.  # noqa: E501
        :rtype: str
        """
        return self._part_of_speech

    @part_of_speech.setter
    def part_of_speech(self, part_of_speech):
        """Sets the part_of_speech of this KeywordsResponseKeywords.

        Part of speech of the keyword  # noqa: E501

        :param part_of_speech: The part_of_speech of this KeywordsResponseKeywords.  # noqa: E501
        :type: str
        """
        allowed_values = ["Noun", "Verb", "Adverb", "Adjective"]  # noqa: E501
        if part_of_speech not in allowed_values:
            raise ValueError(
                "Invalid value for `part_of_speech` ({0}), must be one of {1}"  # noqa: E501
                .format(part_of_speech, allowed_values)
            )

        self._part_of_speech = part_of_speech

    @property
    def significance(self):
        """Gets the significance of this KeywordsResponseKeywords.  # noqa: E501

        How distinct a particular keyword is for the explored text. Significance is calculated on a scale of 0,00 to 100,00. The greater the significance, the greater the chance that the concepts in the investigated data revolve around such a word.   # noqa: E501

        :return: The significance of this KeywordsResponseKeywords.  # noqa: E501
        :rtype: float
        """
        return self._significance

    @significance.setter
    def significance(self, significance):
        """Sets the significance of this KeywordsResponseKeywords.

        How distinct a particular keyword is for the explored text. Significance is calculated on a scale of 0,00 to 100,00. The greater the significance, the greater the chance that the concepts in the investigated data revolve around such a word.   # noqa: E501

        :param significance: The significance of this KeywordsResponseKeywords.  # noqa: E501
        :type: float
        """

        self._significance = significance

    @property
    def support(self):
        """Gets the support of this KeywordsResponseKeywords.  # noqa: E501

        The number of different records containing the keyword  # noqa: E501

        :return: The support of this KeywordsResponseKeywords.  # noqa: E501
        :rtype: int
        """
        return self._support

    @support.setter
    def support(self, support):
        """Sets the support of this KeywordsResponseKeywords.

        The number of different records containing the keyword  # noqa: E501

        :param support: The support of this KeywordsResponseKeywords.  # noqa: E501
        :type: int
        """

        self._support = support

    @property
    def frequency(self):
        """Gets the frequency of this KeywordsResponseKeywords.  # noqa: E501

        The number of times the keyword appears in the data  # noqa: E501

        :return: The frequency of this KeywordsResponseKeywords.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this KeywordsResponseKeywords.

        The number of times the keyword appears in the data  # noqa: E501

        :param frequency: The frequency of this KeywordsResponseKeywords.  # noqa: E501
        :type: int
        """

        self._frequency = frequency

    @property
    def positions(self):
        """Gets the positions of this KeywordsResponseKeywords.  # noqa: E501

        Keyword positions in text  # noqa: E501

        :return: The positions of this KeywordsResponseKeywords.  # noqa: E501
        :rtype: list[KeywordsResponsePositions]
        """
        return self._positions

    @positions.setter
    def positions(self, positions):
        """Sets the positions of this KeywordsResponseKeywords.

        Keyword positions in text  # noqa: E501

        :param positions: The positions of this KeywordsResponseKeywords.  # noqa: E501
        :type: list[KeywordsResponsePositions]
        """

        self._positions = positions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeywordsResponseKeywords):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
