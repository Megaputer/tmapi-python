# coding: utf-8

"""
    Megaputer Text Mining API

    Megaputer Text Mining API  # noqa: E501

    OpenAPI spec version: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TotalLimitPeriodic1Response(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ntu_period1': 'str',
        'ntu_in_period1_limit': 'int',
        'ntu_in_period1': 'int'
    }

    attribute_map = {
        'ntu_period1': 'NTUPeriod1',
        'ntu_in_period1_limit': 'NTUInPeriod1Limit',
        'ntu_in_period1': 'NTUInPeriod1'
    }

    def __init__(self, ntu_period1=None, ntu_in_period1_limit=None, ntu_in_period1=None):  # noqa: E501
        """TotalLimitPeriodic1Response - a model defined in OpenAPI"""  # noqa: E501

        self._ntu_period1 = None
        self._ntu_in_period1_limit = None
        self._ntu_in_period1 = None
        self.discriminator = None

        if ntu_period1 is not None:
            self.ntu_period1 = ntu_period1
        if ntu_in_period1_limit is not None:
            self.ntu_in_period1_limit = ntu_in_period1_limit
        if ntu_in_period1 is not None:
            self.ntu_in_period1 = ntu_in_period1

    @property
    def ntu_period1(self):
        """Gets the ntu_period1 of this TotalLimitPeriodic1Response.  # noqa: E501

        A period when limitations apply  # noqa: E501

        :return: The ntu_period1 of this TotalLimitPeriodic1Response.  # noqa: E501
        :rtype: str
        """
        return self._ntu_period1

    @ntu_period1.setter
    def ntu_period1(self, ntu_period1):
        """Sets the ntu_period1 of this TotalLimitPeriodic1Response.

        A period when limitations apply  # noqa: E501

        :param ntu_period1: The ntu_period1 of this TotalLimitPeriodic1Response.  # noqa: E501
        :type: str
        """
        allowed_values = ["Second", "Minute", "Hour", "Day", "Month"]  # noqa: E501
        if ntu_period1 not in allowed_values:
            raise ValueError(
                "Invalid value for `ntu_period1` ({0}), must be one of {1}"  # noqa: E501
                .format(ntu_period1, allowed_values)
            )

        self._ntu_period1 = ntu_period1

    @property
    def ntu_in_period1_limit(self):
        """Gets the ntu_in_period1_limit of this TotalLimitPeriodic1Response.  # noqa: E501

        A maximum number of requests in the specified period  # noqa: E501

        :return: The ntu_in_period1_limit of this TotalLimitPeriodic1Response.  # noqa: E501
        :rtype: int
        """
        return self._ntu_in_period1_limit

    @ntu_in_period1_limit.setter
    def ntu_in_period1_limit(self, ntu_in_period1_limit):
        """Sets the ntu_in_period1_limit of this TotalLimitPeriodic1Response.

        A maximum number of requests in the specified period  # noqa: E501

        :param ntu_in_period1_limit: The ntu_in_period1_limit of this TotalLimitPeriodic1Response.  # noqa: E501
        :type: int
        """

        self._ntu_in_period1_limit = ntu_in_period1_limit

    @property
    def ntu_in_period1(self):
        """Gets the ntu_in_period1 of this TotalLimitPeriodic1Response.  # noqa: E501

        A number of requests that have already been processed  # noqa: E501

        :return: The ntu_in_period1 of this TotalLimitPeriodic1Response.  # noqa: E501
        :rtype: int
        """
        return self._ntu_in_period1

    @ntu_in_period1.setter
    def ntu_in_period1(self, ntu_in_period1):
        """Sets the ntu_in_period1 of this TotalLimitPeriodic1Response.

        A number of requests that have already been processed  # noqa: E501

        :param ntu_in_period1: The ntu_in_period1 of this TotalLimitPeriodic1Response.  # noqa: E501
        :type: int
        """

        self._ntu_in_period1 = ntu_in_period1

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TotalLimitPeriodic1Response):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
