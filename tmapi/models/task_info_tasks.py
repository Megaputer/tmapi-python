# coding: utf-8

"""
    Megaputer Text Mining API

    Megaputer Text Mining API  # noqa: E501

    OpenAPI spec version: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TaskInfoTasks(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'created': 'str',
        'modified': 'str',
        'last_accessed': 'str',
        'done': 'int',
        'error': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'modified': 'modified',
        'last_accessed': 'lastAccessed',
        'done': 'done',
        'error': 'error'
    }

    def __init__(self, id=None, created=None, modified=None, last_accessed=None, done=None, error=None):  # noqa: E501
        """TaskInfoTasks - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._created = None
        self._modified = None
        self._last_accessed = None
        self._done = None
        self._error = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        if last_accessed is not None:
            self.last_accessed = last_accessed
        if done is not None:
            self.done = done
        if error is not None:
            self.error = error

    @property
    def id(self):
        """Gets the id of this TaskInfoTasks.  # noqa: E501

        An identifier of the task, which this element shows information about  # noqa: E501

        :return: The id of this TaskInfoTasks.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskInfoTasks.

        An identifier of the task, which this element shows information about  # noqa: E501

        :param id: The id of this TaskInfoTasks.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created(self):
        """Gets the created of this TaskInfoTasks.  # noqa: E501

        UTC time of the task creation (not starting time, since starting time may be delayed)  # noqa: E501

        :return: The created of this TaskInfoTasks.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this TaskInfoTasks.

        UTC time of the task creation (not starting time, since starting time may be delayed)  # noqa: E501

        :param created: The created of this TaskInfoTasks.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this TaskInfoTasks.  # noqa: E501

        UTC time when the task data were changed. Typically it is the time when the value in the done parameter were changed. If done= 100, then modified stores the time when the task is completed   # noqa: E501

        :return: The modified of this TaskInfoTasks.  # noqa: E501
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this TaskInfoTasks.

        UTC time when the task data were changed. Typically it is the time when the value in the done parameter were changed. If done= 100, then modified stores the time when the task is completed   # noqa: E501

        :param modified: The modified of this TaskInfoTasks.  # noqa: E501
        :type: str
        """

        self._modified = modified

    @property
    def last_accessed(self):
        """Gets the last_accessed of this TaskInfoTasks.  # noqa: E501

        UTC time when the task execution results were last requested. Initially this value is the time of task creation (created)  # noqa: E501

        :return: The last_accessed of this TaskInfoTasks.  # noqa: E501
        :rtype: str
        """
        return self._last_accessed

    @last_accessed.setter
    def last_accessed(self, last_accessed):
        """Sets the last_accessed of this TaskInfoTasks.

        UTC time when the task execution results were last requested. Initially this value is the time of task creation (created)  # noqa: E501

        :param last_accessed: The last_accessed of this TaskInfoTasks.  # noqa: E501
        :type: str
        """

        self._last_accessed = last_accessed

    @property
    def done(self):
        """Gets the done of this TaskInfoTasks.  # noqa: E501

        Progress percentage of the task performance. When it is 100, then the task is completed. Check this parameter to find out if the task is completed or not   # noqa: E501

        :return: The done of this TaskInfoTasks.  # noqa: E501
        :rtype: int
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this TaskInfoTasks.

        Progress percentage of the task performance. When it is 100, then the task is completed. Check this parameter to find out if the task is completed or not   # noqa: E501

        :param done: The done of this TaskInfoTasks.  # noqa: E501
        :type: int
        """
        if done is not None and done > 100:  # noqa: E501
            raise ValueError("Invalid value for `done`, must be a value less than or equal to `100`")  # noqa: E501
        if done is not None and done < 0:  # noqa: E501
            raise ValueError("Invalid value for `done`, must be a value greater than or equal to `0`")  # noqa: E501

        self._done = done

    @property
    def error(self):
        """Gets the error of this TaskInfoTasks.  # noqa: E501

        A task execution error. If done = 100 and this parameter is not empty, then the task has ended with an error and it cannot provide any results   # noqa: E501

        :return: The error of this TaskInfoTasks.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this TaskInfoTasks.

        A task execution error. If done = 100 and this parameter is not empty, then the task has ended with an error and it cannot provide any results   # noqa: E501

        :param error: The error of this TaskInfoTasks.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskInfoTasks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
