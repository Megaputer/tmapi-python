# coding: utf-8

"""
    Megaputer Text Mining API

    Megaputer Text Mining API  # noqa: E501

    OpenAPI spec version: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tmapi.api_client import ApiClient


class OperationsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def extract_documents_entities(self, documents, **kwargs):  # noqa: E501
        """Entities extraction  # noqa: E501

        The operation extracts entities from each file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extract_documents_entities(documents, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Documents documents: Documents to process (required)
        :param str positions: Positions format to be returned from server: - `none` - Don't return positions (**default**) - `symbol` - Symbol positions - `token` - Token positions 
        :return: EntitiesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.extract_documents_entities_with_http_info(documents, **kwargs)  # noqa: E501
        else:
            (data) = self.extract_documents_entities_with_http_info(documents, **kwargs)  # noqa: E501
            return data

    def extract_documents_entities_with_http_info(self, documents, **kwargs):  # noqa: E501
        """Entities extraction  # noqa: E501

        The operation extracts entities from each file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extract_documents_entities_with_http_info(documents, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Documents documents: Documents to process (required)
        :param str positions: Positions format to be returned from server: - `none` - Don't return positions (**default**) - `symbol` - Symbol positions - `token` - Token positions 
        :return: EntitiesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['documents', 'positions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method extract_documents_entities" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'documents' is set
        if ('documents' not in local_var_params or
                local_var_params['documents'] is None):
            raise ValueError("Missing the required parameter `documents` when calling `extract_documents_entities`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'positions' in local_var_params:
            query_params.append(('positions', local_var_params['positions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'documents' in local_var_params:
            body_params = local_var_params['documents']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/operations/entities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntitiesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def extract_documents_facts(self, documents, **kwargs):  # noqa: E501
        """Facts extraction  # noqa: E501

        The operation extracts facts from each file. The term \"fact\" is used to denote phenomena, events, notions and relations between them which may be of interest to users.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extract_documents_facts(documents, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Documents documents: Documents to process (required)
        :param str positions: Positions format to be returned from server: - `none` - Don't return positions (**default**) - `symbol` - Symbol positions - `token` - Token positions 
        :return: FactsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.extract_documents_facts_with_http_info(documents, **kwargs)  # noqa: E501
        else:
            (data) = self.extract_documents_facts_with_http_info(documents, **kwargs)  # noqa: E501
            return data

    def extract_documents_facts_with_http_info(self, documents, **kwargs):  # noqa: E501
        """Facts extraction  # noqa: E501

        The operation extracts facts from each file. The term \"fact\" is used to denote phenomena, events, notions and relations between them which may be of interest to users.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extract_documents_facts_with_http_info(documents, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Documents documents: Documents to process (required)
        :param str positions: Positions format to be returned from server: - `none` - Don't return positions (**default**) - `symbol` - Symbol positions - `token` - Token positions 
        :return: FactsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['documents', 'positions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method extract_documents_facts" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'documents' is set
        if ('documents' not in local_var_params or
                local_var_params['documents'] is None):
            raise ValueError("Missing the required parameter `documents` when calling `extract_documents_facts`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'positions' in local_var_params:
            query_params.append(('positions', local_var_params['positions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'documents' in local_var_params:
            body_params = local_var_params['documents']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/operations/facts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FactsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def extract_documents_keywords(self, documents, **kwargs):  # noqa: E501
        """Keywords extraction  # noqa: E501

        The operation explores often mentioned terms in each file. The response returns keywords and other statistics extracted from each file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extract_documents_keywords(documents, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Documents documents: Documents to process (required)
        :param str positions: Positions format to be returned from server: - `none` - Don't return positions (**default**) - `symbol` - Symbol positions - `token` - Token positions 
        :return: KeywordsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.extract_documents_keywords_with_http_info(documents, **kwargs)  # noqa: E501
        else:
            (data) = self.extract_documents_keywords_with_http_info(documents, **kwargs)  # noqa: E501
            return data

    def extract_documents_keywords_with_http_info(self, documents, **kwargs):  # noqa: E501
        """Keywords extraction  # noqa: E501

        The operation explores often mentioned terms in each file. The response returns keywords and other statistics extracted from each file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extract_documents_keywords_with_http_info(documents, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Documents documents: Documents to process (required)
        :param str positions: Positions format to be returned from server: - `none` - Don't return positions (**default**) - `symbol` - Symbol positions - `token` - Token positions 
        :return: KeywordsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['documents', 'positions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method extract_documents_keywords" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'documents' is set
        if ('documents' not in local_var_params or
                local_var_params['documents'] is None):
            raise ValueError("Missing the required parameter `documents` when calling `extract_documents_keywords`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'positions' in local_var_params:
            query_params.append(('positions', local_var_params['positions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'documents' in local_var_params:
            body_params = local_var_params['documents']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/operations/keywords', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeywordsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def extract_documents_sentiments(self, documents, **kwargs):  # noqa: E501
        """Sentiments analysis  # noqa: E501

        The operation extracts opinions and emotions related to something, identifies the subject, the object of evaluation and the evaluation itself in each file.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extract_documents_sentiments(documents, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Documents documents: Documents to process (required)
        :param str positions: Positions format to be returned from server: - `none` - Don't return positions (**default**) - `symbol` - Symbol positions - `token` - Token positions 
        :return: SentimentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.extract_documents_sentiments_with_http_info(documents, **kwargs)  # noqa: E501
        else:
            (data) = self.extract_documents_sentiments_with_http_info(documents, **kwargs)  # noqa: E501
            return data

    def extract_documents_sentiments_with_http_info(self, documents, **kwargs):  # noqa: E501
        """Sentiments analysis  # noqa: E501

        The operation extracts opinions and emotions related to something, identifies the subject, the object of evaluation and the evaluation itself in each file.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extract_documents_sentiments_with_http_info(documents, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Documents documents: Documents to process (required)
        :param str positions: Positions format to be returned from server: - `none` - Don't return positions (**default**) - `symbol` - Symbol positions - `token` - Token positions 
        :return: SentimentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['documents', 'positions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method extract_documents_sentiments" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'documents' is set
        if ('documents' not in local_var_params or
                local_var_params['documents'] is None):
            raise ValueError("Missing the required parameter `documents` when calling `extract_documents_sentiments`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'positions' in local_var_params:
            query_params.append(('positions', local_var_params['positions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'documents' in local_var_params:
            body_params = local_var_params['documents']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/operations/sentiments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SentimentsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def extract_documents_tokens(self, documents, **kwargs):  # noqa: E501
        """Text parsing  # noqa: E501

        Parse text in each file. The response returns the text which is divided into tokens and sentences, conducts morphological analysis, determines parts of speech, lemmas, etc.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extract_documents_tokens(documents, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Documents documents: Documents to process (required)
        :return: TokensResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.extract_documents_tokens_with_http_info(documents, **kwargs)  # noqa: E501
        else:
            (data) = self.extract_documents_tokens_with_http_info(documents, **kwargs)  # noqa: E501
            return data

    def extract_documents_tokens_with_http_info(self, documents, **kwargs):  # noqa: E501
        """Text parsing  # noqa: E501

        Parse text in each file. The response returns the text which is divided into tokens and sentences, conducts morphological analysis, determines parts of speech, lemmas, etc.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extract_documents_tokens_with_http_info(documents, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Documents documents: Documents to process (required)
        :return: TokensResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['documents']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method extract_documents_tokens" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'documents' is set
        if ('documents' not in local_var_params or
                local_var_params['documents'] is None):
            raise ValueError("Missing the required parameter `documents` when calling `extract_documents_tokens`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'documents' in local_var_params:
            body_params = local_var_params['documents']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/operations/tokens', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokensResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def extract_entities(self, text, **kwargs):  # noqa: E501
        """Entities extraction  # noqa: E501

        The operation extracts entities from the text document. For example, an entity may represent a person’s name, a name of an organization, an e-mail address, a phone number, or a geographical location.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extract_entities(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: Document text to process (required)
        :param str positions: Positions format to be returned from server: - `none` - Don't return positions (**default**) - `symbol` - Symbol positions - `token` - Token positions 
        :return: EntitiesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.extract_entities_with_http_info(text, **kwargs)  # noqa: E501
        else:
            (data) = self.extract_entities_with_http_info(text, **kwargs)  # noqa: E501
            return data

    def extract_entities_with_http_info(self, text, **kwargs):  # noqa: E501
        """Entities extraction  # noqa: E501

        The operation extracts entities from the text document. For example, an entity may represent a person’s name, a name of an organization, an e-mail address, a phone number, or a geographical location.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extract_entities_with_http_info(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: Document text to process (required)
        :param str positions: Positions format to be returned from server: - `none` - Don't return positions (**default**) - `symbol` - Symbol positions - `token` - Token positions 
        :return: EntitiesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['text', 'positions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method extract_entities" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'text' is set
        if ('text' not in local_var_params or
                local_var_params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `extract_entities`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'text' in local_var_params:
            query_params.append(('text', local_var_params['text']))  # noqa: E501
        if 'positions' in local_var_params:
            query_params.append(('positions', local_var_params['positions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/operations/entities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntitiesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def extract_facts(self, text, **kwargs):  # noqa: E501
        """Facts extraction  # noqa: E501

        The operation extracts facts from the text. The term \"fact\" is used to denote phenomena, events, notions and relations between them which may be of interest to users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extract_facts(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: Document text to process (required)
        :param str positions: Positions format to be returned from server: - `none` - Don't return positions (**default**) - `symbol` - Symbol positions - `token` - Token positions 
        :return: FactsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.extract_facts_with_http_info(text, **kwargs)  # noqa: E501
        else:
            (data) = self.extract_facts_with_http_info(text, **kwargs)  # noqa: E501
            return data

    def extract_facts_with_http_info(self, text, **kwargs):  # noqa: E501
        """Facts extraction  # noqa: E501

        The operation extracts facts from the text. The term \"fact\" is used to denote phenomena, events, notions and relations between them which may be of interest to users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extract_facts_with_http_info(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: Document text to process (required)
        :param str positions: Positions format to be returned from server: - `none` - Don't return positions (**default**) - `symbol` - Symbol positions - `token` - Token positions 
        :return: FactsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['text', 'positions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method extract_facts" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'text' is set
        if ('text' not in local_var_params or
                local_var_params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `extract_facts`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'text' in local_var_params:
            query_params.append(('text', local_var_params['text']))  # noqa: E501
        if 'positions' in local_var_params:
            query_params.append(('positions', local_var_params['positions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/operations/facts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FactsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def extract_keywords(self, text, **kwargs):  # noqa: E501
        """Keywords extraction  # noqa: E501

        The operation explores often mentioned terms in the text. The response returns keywords and other statistics extracted from the text.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extract_keywords(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: Document text to process (required)
        :param str positions: Positions format to be returned from server: - `none` - Don't return positions (**default**) - `symbol` - Symbol positions - `token` - Token positions 
        :return: KeywordsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.extract_keywords_with_http_info(text, **kwargs)  # noqa: E501
        else:
            (data) = self.extract_keywords_with_http_info(text, **kwargs)  # noqa: E501
            return data

    def extract_keywords_with_http_info(self, text, **kwargs):  # noqa: E501
        """Keywords extraction  # noqa: E501

        The operation explores often mentioned terms in the text. The response returns keywords and other statistics extracted from the text.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extract_keywords_with_http_info(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: Document text to process (required)
        :param str positions: Positions format to be returned from server: - `none` - Don't return positions (**default**) - `symbol` - Symbol positions - `token` - Token positions 
        :return: KeywordsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['text', 'positions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method extract_keywords" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'text' is set
        if ('text' not in local_var_params or
                local_var_params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `extract_keywords`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'text' in local_var_params:
            query_params.append(('text', local_var_params['text']))  # noqa: E501
        if 'positions' in local_var_params:
            query_params.append(('positions', local_var_params['positions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/operations/keywords', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeywordsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def extract_sentiments(self, text, **kwargs):  # noqa: E501
        """Sentiments analysis  # noqa: E501

        Extract sentiments from document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extract_sentiments(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: Document text to process (required)
        :param str positions: Positions format to be returned from server: - `none` - Don't return positions (**default**) - `symbol` - Symbol positions - `token` - Token positions 
        :return: SentimentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.extract_sentiments_with_http_info(text, **kwargs)  # noqa: E501
        else:
            (data) = self.extract_sentiments_with_http_info(text, **kwargs)  # noqa: E501
            return data

    def extract_sentiments_with_http_info(self, text, **kwargs):  # noqa: E501
        """Sentiments analysis  # noqa: E501

        Extract sentiments from document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extract_sentiments_with_http_info(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: Document text to process (required)
        :param str positions: Positions format to be returned from server: - `none` - Don't return positions (**default**) - `symbol` - Symbol positions - `token` - Token positions 
        :return: SentimentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['text', 'positions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method extract_sentiments" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'text' is set
        if ('text' not in local_var_params or
                local_var_params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `extract_sentiments`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'text' in local_var_params:
            query_params.append(('text', local_var_params['text']))  # noqa: E501
        if 'positions' in local_var_params:
            query_params.append(('positions', local_var_params['positions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/operations/sentiments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SentimentsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def extract_tokens(self, text, **kwargs):  # noqa: E501
        """Text parsing  # noqa: E501

        Parse document text. The response returns the text which is divided into tokens and sentences, conducts morphological analysis, determines parts of speech, lemmas, etc.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extract_tokens(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: Document text to process (required)
        :return: TokensResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.extract_tokens_with_http_info(text, **kwargs)  # noqa: E501
        else:
            (data) = self.extract_tokens_with_http_info(text, **kwargs)  # noqa: E501
            return data

    def extract_tokens_with_http_info(self, text, **kwargs):  # noqa: E501
        """Text parsing  # noqa: E501

        Parse document text. The response returns the text which is divided into tokens and sentences, conducts morphological analysis, determines parts of speech, lemmas, etc.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extract_tokens_with_http_info(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: Document text to process (required)
        :return: TokensResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['text']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method extract_tokens" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'text' is set
        if ('text' not in local_var_params or
                local_var_params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `extract_tokens`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'text' in local_var_params:
            query_params.append(('text', local_var_params['text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/operations/tokens', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokensResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_documents_languages(self, documents, **kwargs):  # noqa: E501
        """Language detection  # noqa: E501

        Automatically determine the language of each file.  The text encoding format of source files with the .txt extension must be strictly UTF-8. Otherwise, requests will not be executed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_documents_languages(documents, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Documents documents: Documents to process (required)
        :return: LanguagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_documents_languages_with_http_info(documents, **kwargs)  # noqa: E501
        else:
            (data) = self.get_documents_languages_with_http_info(documents, **kwargs)  # noqa: E501
            return data

    def get_documents_languages_with_http_info(self, documents, **kwargs):  # noqa: E501
        """Language detection  # noqa: E501

        Automatically determine the language of each file.  The text encoding format of source files with the .txt extension must be strictly UTF-8. Otherwise, requests will not be executed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_documents_languages_with_http_info(documents, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Documents documents: Documents to process (required)
        :return: LanguagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['documents']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_documents_languages" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'documents' is set
        if ('documents' not in local_var_params or
                local_var_params['documents'] is None):
            raise ValueError("Missing the required parameter `documents` when calling `get_documents_languages`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'documents' in local_var_params:
            body_params = local_var_params['documents']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/operations/languages', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LanguagesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_languages(self, text, **kwargs):  # noqa: E501
        """Language detection  # noqa: E501

        Detect the language of text documents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_languages(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: Document text to process (required)
        :return: LanguagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_languages_with_http_info(text, **kwargs)  # noqa: E501
        else:
            (data) = self.get_languages_with_http_info(text, **kwargs)  # noqa: E501
            return data

    def get_languages_with_http_info(self, text, **kwargs):  # noqa: E501
        """Language detection  # noqa: E501

        Detect the language of text documents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_languages_with_http_info(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: Document text to process (required)
        :return: LanguagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['text']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_languages" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'text' is set
        if ('text' not in local_var_params or
                local_var_params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `get_languages`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'text' in local_var_params:
            query_params.append(('text', local_var_params['text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/operations/languages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LanguagesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
